//#region Constants

const base64Image = "iVBORw0KGgoAAAANSUhEUgAAAZAAAAEFCAIAAABCdiZrAAAACXBIWXMAAAsSAAALEgHS3X78AAAgAElEQVR42u2dzW9bV3rGn0w5wLBTRpSACAUDmDRowGoj1DdAtBA6suksZmtmV3Qj+i8w3XUB00X3pv8CX68Gswq96aKLhI5bCKiM + gpVphIa1qQBcQbyQB / hTJlpOHUXlyEvD885vLxfvCSfH7KIJVuUrnif + z7nPOd933v37h0IIWQe + BEvASGEgkUIIRQsQggFixBCKFiEEELBIoRQsAghhIJFCCEULEIIBYsQQihYhBBCwSKEULAIIYSCRQghFCxCCAWLEEIoWIQQQsEihCwQCV4CEgDdJvYM9C77f9x8gkyJV4UEznvs6U780rvAfgGdg5EPbr9CyuC1IbSEJGa8KopqBWC / gI7Fa0MoWCROHJZw / lxWdl3isITeBa8QoWCRyOk2JR9sVdF + qvwnnQPsF + SaRSEjFCwSCr0LNCo4rYkfb5s4vj / h33YOcFSWy59VlIsgIRQs4pHTGvYMdJvIjupOx5Ir0Tjtp5K / mTKwXsSLq2hUWG0R93CXkKg9oL0 + ldnFpil + yhlicIM06NA2cXgXySyuV7Fe5CUnFCziyQO2qmg8BIDUDWzVkUiPfHY8xOCGT77EWkH84FEZbx4DwOotbJpI5nj5CQWLTOMBj8votuRqBWDP8KJWABIr2KpLwlmHpeHKff4BsmXxFQmhYBGlBxzoy7YlljxOcfFAMottS6JH + 4Xh69IhEgoWcesBNdVQozLyd7whrdrGbSYdIqFgkQkecMD4epO9QB4I46v4tmbtGeK3QYdIKFhE7gEHjO / odSzsfRzkS1 + 5h42q + MGOhf2CuPlIh0goWPSAogcccP2RJHI1riP + kQYdVK9Fh0goWPSAk82a5xCDG4zPJaWTxnvSIVKwKFj0gEq1go8QgxtUQQeNZtEhUrB4FZbaA9pIN + 98hhhcatbNpqRoGgRKpdAhUrDIMnpAjVrpJSNApK / uRi7pEClYZIk84KDGGQ + IBhhicMP6HRg1ycedgVI6RELBWl4POFCr8VWkszpe3o76G1aFs9ws + dMhUrDIInvAAeMB0ZBCDG6QBh2kgVI6RAoWWRYPqBEI9 + oQEtKgg3sNpUOkYJGF8oADxgOioUauXKIKOkxV99EhUrDIgnhAG + mCUQQhBpeaNb4JgOn3AegQKVhkvj2gjXRLLrIQgxtUQYdpNYsOkYJF5tUDarQg4hCDS1u3VZd83IOw0iFSsMiceUCNWp3WYH0Wx59R6ls9W1c6RAoWmQ8PaCNdz55hiMEN4zsDNhMDpXSIFCwylx5Qo1a9C3yVi69a2ajCWZ43NOkQKVgkph5wwHi + KQ4hBs9SC9 + RMTpEChaJlwfUFylWEafP5uMKqIIOPv0sHSIFi8TFAzpLiXxF / KCbdetEGutFUSa6TXQsdKypv42UgZQhfrWOhbO6q8nPqqCD / zU4OkQKFpm9B7SRbrTpQwzJHNaL / VHyiRVF0dfC2xpOzMnKlUgjW0amhGRW / ZM + w5sqzuqTNWtb9nKBZDLoEClYZGYe0EYaENWHGDaquHJv5CPnz / H9BToWkjmsFkTdOX0GS22p1ovYNEdUr9vCeR3dJlIG1gojn2o8RKPiRX + D0iw6RAoWmYEH1HioiQZqq47VW32dalUlfi1fQf7ByEdUQpMpYfOJ46UPcFweKaMSaWyaWL8z / Mibxzgqe3G4CC6pT4dIwSLReUCNWrkJMdjh8sMSuk1d3bReRGb3hy97iS / SEl + 5bQ0LqM4B9gvytaptC6kbwz++vD3ZG0r3EBDoWUg6RAoWCd0D9isXReTKTYghZbhdUB / UYlKV2TSHitZtYc9QrqynDGy / GnGg + 4XJr779ShJ0gNdAKR3i / PAjXoIZe8BGBS + ";
const base64File = "";

// #endregion

(function () {
    "use strict";

    // The initialize function must be run each time a new page is loaded.
    Office.initialize = function () {

        // #region Document Ready Region

        $(document).ready(function () {

            // If not using Word 2016, use fallback logic.
            if (Office.context.requirements.isSetSupported('WordApi', '1.3')) {

                // #region API 1.3

                LogInformation("This code is using word 2019 or later");


                $('#btnAlignTextRight').click(AlignTextRight_New);
                $('#btnApplyInBuildStyle').click(ApplyInBuildStyle_New);
                $("#btnChangeFont").click(ChangeFont_New);
                $("#btnInsertAbbrevation").click(InsertTextIntoRange_New);
                $("#btnAddVersionInfo").click(InsertTextBeforeRange_New);
                $("#btnReplaceText").click(ReplaceText_New);
                $("#btnAddHtml").click(InsertHTML_New);
                $("#btnAddTable").click(InsertTable_New);
                $("#btnCreateContentControl").click(CreateContentControl_New);
                $("#btnReplaceContentControl").click(ReplaceContentInControl_New);
                $("#OfficeVersion").html("This code is using word 2019 or later");

                $('#tbl2016').hide();

                // #endregion 
            }

            else if (Office.context.requirements.isSetSupported('WordApi', '1.1')) {

                // #region API 1.1

                LogInformation("This code is using word 2016 or later");

                $('#btnAlignTextRight').click(AlignTextRight_Old);
                $('#btnApplyInBuildStyle').click(ApplyInBuildStyle_Old);
                $("#btnChangeFont").click(ChangeFont_Old);
                $("#btnInsertAbbrevation").click(InsertTextIntoRange_Old);
                $("#btnAddVersionInfo").click(InsertTextBeforeRange_Old);
                $("#btnReplaceText").click(ReplaceText_Old);
                $("#btnAddHtml").click(InsertHTML_Old);
                $("#btnAddTable").click(InsertTable_Old);
                $("#btnCreateContentControl").click(CreateContentControl_Old);
                $("#btnReplaceContentControl").click(ReplaceContentInControl_Old);
                $("#OfficeVersion").html("This code is using word 2016 or later");


                // Api 1.1 all methods and properties implementation

                $('#tbl2016').show();
                $("#btnGetHtml").click(GetHtml_Old);
                $("#btnBodyClear").click(ClearBody_Old);
                $("#btnGetFontDetails").click(GetFontDetails_Old);
                $("#btnGetOOXml").click(GetOOXml_Old);
                $("#btnInsertBreak").click(InsertBreak_Old);
                $("#btnAddContentControl").click(AddContentControl_Old);
                $("#btnInsertFile").click(InsertFile_Old);
                $("#btnInsertHtml").click(InsertHtml_Old);
                $("#btnInsertOOXML").click(InsertOOXML_Old);
                $("#btnInsertParagraph").click(InsertParagraph_Old);
                $("#btnInsertText").click(InsertText_Old);
                $("#btnSearchString").click(SearchString_Old);
                $("#btnSelectBodyText").click(SelectBodyText_Old);
                $("#btnGetBodyText").click(GetBodyText_Old);


                // #endregion 

            }

            // #region Common

            $('#btnAddParagraph').click(AddParagraph);
            $('#btnAddImage').click(AddImage);

            // #endregion

            // #region Api Methods

            $("#btnSendBody").click(SendBody);
            $("#btnShowUnicode").click(GetUnicode);
            $("#btnShowCharCount").click(GetCharCount);
            $("#btnShowWordCount").click(GetWordCount);

            // #endregion
        });

        // #endregion 
    };

})();


// #region APi Interaction Code

// #region Logging Functionality

function LogInformation(logMessage) {
    LogMessage(logMessage, "Information");
}

function LogFatal(logMessage) {
    LogMessage(logMessage, "Fatal");
}

function LogVerbose(logMessage) {
    LogMessage(logMessage, "Verbose");
}

function LogWarning(logMessage) {
    LogMessage(logMessage, "Warning");
}

function LogDebug(logMessage) {
    LogMessage(logMessage, "Debug");
}

function LogError(logMessage) {
    LogMessage(logMessage, "Error");
}

function LogMessage(logMessage, logType) {
    Word.run(function (context) {
        return context.sync().then(function () {
            const url = "https://localhost:44324/logging/log?logMessage=" + logMessage + "&logType=" + logType;
            $.ajax({
                type: "GET",
                url: url,
                success: function () {
                },
                error: function () {
                }
            });
        });
    });
}


// #endregion

// #region Word Functionality

function SendBody() {
    Word.run(function (context) {
        var docBody = context.document;
        return context.sync().then(function () {
            $.ajax({
                type: "POST",
                url: "https://localhost:44324/wordanalyzer/document",
                data: JSON.stringify(docBody),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (data) {
                    let htmlData = data.replace(/\r\n/g, '<br>');
                },
                error: function (data) {
                    $("#txtUnicodeResult").html("Error occurred in ajax call.");
                    LogMessage("Error occurred in SendBody ajax call", "Error");
                }
            });
        });
    });
}

function GetUnicode() {
    Word.run(function (context) {
        const range = context.document.getSelection();
        context.load(range, 'text');
        return context.sync().then(function () {
            const url = "https://localhost:44324/wordanalyzer/unicode?value=" + range.text;
            $.ajax({
                type: "GET",
                url: url,
                success: function (data) {
                    let htmlData = data.replace(/\r\n/g, '<br>');
                    $("#txtUnicodeResult").html(htmlData);
                },
                error: function (data) {
                    $("#txtUnicodeResult").html("Error occurred in ajax call.");
                    LogMessage("Error occurred in GetUnicode ajax call", "Error");
                }
            });
        });
    });
}

function GetCharCount() {
    Word.run(function (context) {
        const range = context.document.getSelection();
        context.load(range, 'text');
        return context.sync().then(function () {
            const url = "https://localhost:44324/wordanalyzer/charcount?value=" + range.text;
            $.ajax({
                type: "GET",
                url: url,
                success: function (data) {
                    let htmlData = data.replace(/\r\n/g, '<br>');
                    $("#txtCharCountResult").html(htmlData);
                },
                error: function (data) {
                    $("#txtCharCountResult").html("error occurred in ajax call.");
                    LogMessage("Error occurred in GetCharCount ajax call", "Error");
                }
            });
        });
    });
}

function GetWordCount() {
    Word.run(function (context) {
        const range = context.document.getSelection();
        context.load(range, 'text');
        return context.sync().then(function () {
            const url = "https://localhost:44324/wordanalyzer/wordcount?value=" + range.text;
            $.ajax({
                type: "GET",
                url: url,
                success: function (data) {
                    let htmlData = data.replace(/\r\n/g, '<br>');
                    $("#txtWordCountResult").html(htmlData);
                },
                error: function () {
                    $("#txtWordCountResult").html("error occurred in ajax call.");
                    LogMessage("Error occurred in GetWordCount ajax call", "Error");
                }
            });
        });
    });
}


// #endregion

// #endregion


// #region Document Interaction Code

// #region Common Methods

function AddParagraph() {
    Word.run(function (context) {
        context.document.body.insertParagraph(
            "Office has several versions, including Office 2016, Microsoft 365 subscription, and Office on the web.",
            "Start"
        );
        return context.sync();
    }).catch(function (error) {
        console.log('Error: ' + JSON.stringify(error));
        if (error instanceof OfficeExtension.Error) {
            console.log('Debug info: ' + JSON.stringify(error.debugInfo));
            LogMessage("Error occurred in AddParagraph : " + error.debugInfo, "Error");
        }
    });
}

function AddImage() {

    Word.run(function (context) {
        context.document.body.insertInlinePictureFromBase64(base64Image, "End");
        return context.sync();
    }).catch(function (error) {
        console.log('Error: ' + JSON.stringify(error));
        if (error instanceof OfficeExtension.Error) {
            console.log('Debug info: ' + JSON.stringify(error.debugInfo));
            LogMessage("Error occurred in AddImage : " + error.debugInfo, "Error");
        }
    });
}

// #endregion

// #region Api 1.3 Methods

function AlignTextRight_New() {
    Word.run(function (context) {
        var firstParagraph = context.document.body.paragraphs.getFirst();
        return context.sync().then(function () {
            firstParagraph.alignment = Word.Alignment.right;
        });
    }).catch(function (error) {
        console.log('Error: ' + JSON.stringify(error));
        if (error instanceof OfficeExtension.Error) {
            console.log('Debug info: ' + JSON.stringify(error.debugInfo));
            LogMessage("Error occurred in AlignTextRight_New : " + error.debugInfo, "Error");
        }
    });
}

function ApplyInBuildStyle_New() {
    Word.run(function (context) {
        var firstParagraph = context.document.body.paragraphs.getFirst();
        return context.sync().then(function () {
            firstParagraph.styleBuiltIn = "Emphasis";
        });
    }).catch(function (error) {
        console.log('Error: ' + JSON.stringify(error));
        if (error instanceof OfficeExtension.Error) {
            console.log('Debug info: ' + JSON.stringify(error.debugInfo));
            LogMessage("Error occurred in ApplyInBuildStyle_New : " + error.debugInfo, "Error");
        }
    });
}

function ChangeFont_New() {

    Word.run(function (context) {
        var secondParagraph = context.document.body.paragraphs.getFirst().getNext();
        return context.sync().then(function () {
            secondParagraph.font.set({
                name: "Courier New",
                bold: true,
                size: 18,
            });
        });
    }).catch(function (error) {
        console.log('Error: ' + JSON.stringify(error));
        if (error instanceof OfficeExtension.Error) {
            console.log('Debug info: ' + JSON.stringify(error.debugInfo));
            LogMessage("Error occurred in ChangeFont_New : " + error.debugInfo, "Error");
        }
    });
}

function InsertTextIntoRange_New() {

    Word.run(function (context) {
        var originalRange = context.document.getSelection();
        originalRange.insertText("(C2R)", "End");
        originalRange.load("text");
        return context.sync().then(function () {
            context.document.body.insertParagraph("Original range: " + originalRange.text, "End");

        });
    }).catch(function (error) {
        console.log('Error: ' + JSON.stringify(error));
        if (error instanceof OfficeExtension.Error) {
            console.log('Debug info: ' + JSON.stringify(error.debugInfo));
            LogMessage("Error occurred in InsertTextIntoRange_New : " + error.debugInfo, "Error");
        }
    });
}

function InsertTextBeforeRange_New() {

    Word.run(function (context) {
        var originalRange = context.document.getSelection();
        originalRange.insertText("Office 2016, ", "Before");
        originalRange.load("text");
        return context.sync().then(function () {
            context.document.body.insertParagraph("Original range: " + originalRange.text, "End");
        });
    }).catch(function (error) {
        console.log('Error: ' + JSON.stringify(error));
        if (error instanceof OfficeExtension.Error) {
            console.log('Debug info: ' + JSON.stringify(error.debugInfo));
            LogMessage("Error occurred in InsertTextBeforeRange_New : " + error.debugInfo, "Error");
        }
    });
}

function ReplaceText_New() {

    Word.run(function (context) {
        var originalRange = context.document.getSelection();
        originalRange.insertText("many", "Replace");
        return context.sync();
    }).catch(function (error) {
        console.log('Error: ' + JSON.stringify(error));
        if (error instanceof OfficeExtension.Error) {
            console.log('Debug info: ' + JSON.stringify(error.debugInfo));
            LogMessage("Error occurred in ReplaceText_New : " + error.debugInfo, "Error");
        }
    });
}

function InsertHTML_New() {

    Word.run(function (context) {
        var blankParagraph = context.document.body.paragraphs.getLast().insertParagraph("", "After");
        blankParagraph.insertHtml('<p style="font-family: verdana;">Inserted HTML.</p><p>Another paragraph</p>', "End");
        return context.sync();
    }).catch(function (error) {
        console.log('Error: ' + JSON.stringify(error));
        if (error instanceof OfficeExtension.Error) {
            console.log('Debug info: ' + JSON.stringify(error.debugInfo));
            LogMessage("Error occurred in InsertHTML_New : " + error.debugInfo, "Error");
        }
    });
}

function InsertTable_New() {

    Word.run(function (context) {
        const tableData = [
            ["Name", "ID", "Birth City"],
            ["Bob", "434", "Chicago"],
            ["Sue", "719", "Havana"],
        ];
        var blankParagraph = context.document.body.paragraphs.getLast().insertParagraph("", "After");
        blankParagraph.insertTable(3, 3, "After", tableData);

        return context.sync();
    }).catch(function (error) {
        console.log('Error: ' + JSON.stringify(error));
        if (error instanceof OfficeExtension.Error) {
            console.log('Debug info: ' + JSON.stringify(error.debugInfo));
            LogMessage("Error occurred in InsertTable_New : " + error.debugInfo, "Error");
        }
    });
}

function CreateContentControl_New() {

    Word.run(function (context) {
        let serviceNameRange = context.document.getSelection();
        let serviceNameContentControl = serviceNameRange.insertContentControl();
        serviceNameContentControl.title = "Service Name";
        serviceNameContentControl.tag = "serviceName";
        serviceNameContentControl.appearance = "Tags";
        serviceNameContentControl.color = "blue";
        return context.sync();
    }).catch(function (error) {
        console.log('Error: ' + JSON.stringify(error));
        if (error instanceof OfficeExtension.Error) {
            console.log('Debug info: ' + JSON.stringify(error.debugInfo));
            LogMessage("Error occurred in CreateContentControl_New : " + error.debugInfo, "Error");
        }
    });
}

function ReplaceContentInControl_New() {

    Word.run(function (context) {
        var serviceNameContentControl = context.document.contentControls.getByTag("serviceName").getFirst();
        serviceNameContentControl.insertText("Fabrikam Online Productivity Suite", "Replace");

        return context.sync();

    }).catch(function (error) {
        console.log('Error: ' + JSON.stringify(error));
        if (error instanceof OfficeExtension.Error) {
            console.log('Debug info: ' + JSON.stringify(error.debugInfo));
            LogMessage("Error occurred in ReplaceContentInControl_New : " + error.debugInfo, "Error");
        }
    });
}

// #endregion 

// #region Api 1.1 Methods

function AlignTextRight_Old() {

    Word.run(function (context) {
        let paragraphs = context.document.body.paragraphs;
        paragraphs.load("text");
        var firstParagraph;
        return context.sync().then(function () {
            if (paragraphs.items.length > 0) {
                firstParagraph = paragraphs.items[0];
                firstParagraph.load("alignment");
            }
        }).then(context.sync).then(function () {
            firstParagraph.alignment = Word.Alignment.right;
        })
    }).catch(function (error) {
        console.log('Error: ' + JSON.stringify(error));
        if (error instanceof OfficeExtension.Error) {
            console.log('Debug info: ' + JSON.stringify(error.debugInfo));
            LogMessage("Error occurred in AlignTextRight_Old : " + error.debugInfo, "Error");
        }
    });
}

function ApplyInBuildStyle_Old() {

    Word.run(function (context) {
        let paragraphs = context.document.body.paragraphs;
        paragraphs.load("text");
        var firstParagraph;
        return context.sync().then(function () {
            if (paragraphs.items.length > 0) {
                firstParagraph = paragraphs.items[0];
                firstParagraph.load("styles");
            }
        }).then(context.sync).then(function () {
            firstParagraph.style = "Emphasis";
        })
    }).catch(function (error) {
        console.log('Error: ' + JSON.stringify(error));
        if (error instanceof OfficeExtension.Error) {
            console.log('Debug info: ' + JSON.stringify(error.debugInfo));
            LogMessage("Error occurred in ApplyInBuildStyle_Old : " + error.debugInfo, "Error");
        }
    });
}

function ChangeFont_Old() {

    Word.run(function (context) {
        let paragraphs = context.document.body.paragraphs;
        paragraphs.load("text");
        var secondParagraph;
        return context.sync().then(function () {
            if (paragraphs.items.length > 1) {
                secondParagraph = paragraphs.items[1];
                secondParagraph.load("font");
            }
        }).then(context.sync).then(function () {
            secondParagraph.font.set({
                name: "Courier New",
                bold: true,
                size: 18,
            });
        })
    }).catch(function (error) {
        console.log('Error: ' + JSON.stringify(error));
        if (error instanceof OfficeExtension.Error) {
            console.log('Debug info: ' + JSON.stringify(error.debugInfo));
            LogMessage("Error occurred in ChangeFont_Old : " + error.debugInfo, "Error");
        }
    });
}

function InsertTextIntoRange_Old() {

    Word.run(function (context) {
        var originalRange = context.document.getSelection();
        context.load(originalRange, 'text');
        return context.sync().then(function () {
            originalRange.insertText(" (C2R)", "End");
            originalRange.load("text");

        }).then(context.sync).then(function () {
            context.document.body.insertParagraph("Original range: " + originalRange.text, "End");
        })
    }).catch(function (error) {
        console.log('Error: ' + JSON.stringify(error));
        if (error instanceof OfficeExtension.Error) {
            console.log('Debug info: ' + JSON.stringify(error.debugInfo));
            LogMessage("Error occurred in InsertTextIntoRange_Old : " + error.debugInfo, "Error");
        }
    });
}

function InsertTextBeforeRange_Old() {

    Word.run(function (context) {
        var originalRange = context.document.getSelection();
        context.load(originalRange, 'text');
        return context.sync().then(function () {
            originalRange.insertText("Office 2016, ", "Before");
            originalRange.load("text");

        }).then(context.sync).then(function () {
            context.document.body.insertParagraph("Original range: " + originalRange.text, "End");
        })
    }).catch(function (error) {
        console.log('Error: ' + JSON.stringify(error));
        if (error instanceof OfficeExtension.Error) {
            console.log('Debug info: ' + JSON.stringify(error.debugInfo));
            LogMessage("Error occurred in InsertTextBeforeRange_Old : " + error.debugInfo, "Error");
        }
    });
}

function ReplaceText_Old() {

    Word.run(function (context) {
        var originalRange = context.document.getSelection();
        context.load(originalRange, 'text');
        return context.sync().then(function () {
            originalRange.insertText("many", "Replace");
        });
    }).catch(function (error) {
        console.log('Error: ' + JSON.stringify(error));
        if (error instanceof OfficeExtension.Error) {
            console.log('Debug info: ' + JSON.stringify(error.debugInfo));
            LogMessage("Error occurred in ReplaceText_Old : " + error.debugInfo, "Error");
        }
    });
}

function InsertHTML_Old() {

    Word.run(function (context) {
        let paragraphs = context.document.body.paragraphs;
        paragraphs.load("text");
        var blankParagraph;
        return context.sync().then(function () {
            if (paragraphs.items.length > 0) {
                blankParagraph = paragraphs.items[paragraphs.items.length - 1].insertParagraph("", "After");
                blankParagraph.insertHtml('<p style="font-family: verdana;">Inserted HTML.</p><p>Another paragraph</p>', "End");
            }
        });
    }).catch(function (error) {
        console.log('Error: ' + JSON.stringify(error));
        if (error instanceof OfficeExtension.Error) {
            console.log('Debug info: ' + JSON.stringify(error.debugInfo));
            LogMessage("Error occurred in InsertHTML_Old : " + error.debugInfo, "Error");
        }
    });
}

function InsertTable_Old() {

    Word.run(function (context) {
        let paragraphs = context.document.body.paragraphs;
        paragraphs.load("text");
        var blankParagraph;
        const tableData = [
            ["Name", "ID", "Birth City"],
            ["Bob", "434", "Chicago"],
            ["Sue", "719", "Havana"],
        ];
        return context.sync().then(function () {
            if (paragraphs.items.length > 0) {
                blankParagraph = paragraphs.items[paragraphs.items.length - 1].insertParagraph("", "After");
                //blankParagraph = paragraphs.items[paragraphs.items.length - 1];
                blankParagraph.insertTable(3, 3, "After", tableData);
            }
        })
    }).catch(function (error) {
        console.log('Error: ' + JSON.stringify(error));
        if (error instanceof OfficeExtension.Error) {
            console.log('Debug info: ' + JSON.stringify(error.debugInfo));
            LogMessage("Error occurred in InsertTable_Old : " + error.debugInfo, "Error");
        }
    });
}

function CreateContentControl_Old() {

    Word.run(function (context) {
        let serviceNameRange = context.document.getSelection();
        context.load(serviceNameRange, 'text');
        return context.sync().then(function () {
            let serviceNameContentControl = serviceNameRange.insertContentControl();
            serviceNameContentControl.title = "Service Name";
            serviceNameContentControl.tag = "serviceName";
            serviceNameContentControl.appearance = "Tags";
            serviceNameContentControl.color = "blue";
        });
    }).catch(function (error) {
        console.log('Error: ' + JSON.stringify(error));
        if (error instanceof OfficeExtension.Error) {
            console.log('Debug info: ' + JSON.stringify(error.debugInfo));
            LogMessage("Error occurred in CreateContentControl_Old : " + error.debugInfo, "Error");
        }
    });
}

function ReplaceContentInControl_Old() {

    Word.run(function (context) {
        let doc = context.document;
        doc.load("contentControls");
        return context.sync().then(function () {
            var serviceNameContentControl = doc.contentControls.getByTag("serviceName").items[0];
            serviceNameContentControl.insertText("Fabrikam Online Productivity Suite", "Replace");
        });
    }).catch(function (error) {
        console.log('Error: ' + JSON.stringify(error));
        if (error instanceof OfficeExtension.Error) {
            console.log('Debug info: ' + JSON.stringify(error.debugInfo));
            LogMessage("Error occurred in ReplaceContentInControl_Old : " + error.debugInfo, "Error");
        }
    });
}


// #region API 1.1 all methods and properties implementation

function GetHtml_Old() {
    Word.run(function (context) {
        var bodyHTML = context.document.body.getHtml();
        return context.sync().then(function () {
            context.document.body.insertParagraph(bodyHTML.value, "End");
        });
    }).catch(function (error) {
        console.log('Error: ' + JSON.stringify(error));
        if (error instanceof OfficeExtension.Error) {
            console.log('Debug info: ' + JSON.stringify(error.debugInfo));
            LogMessage("Error occurred in GetHtml_Old : " + error.debugInfo, "Error");
        }
    });
}

function ClearBody_Old() {
    Word.run(function (context) {
        context.document.body.clear();
        return context.sync();
    }).catch(function (error) {
        console.log('Error: ' + JSON.stringify(error));
        if (error instanceof OfficeExtension.Error) {
            console.log('Debug info: ' + JSON.stringify(error.debugInfo));
            LogMessage("Error occurred in ClearBody_Old : " + error.debugInfo, "Error");
        }
    });
}

function GetFontDetails_Old() {
    Word.run(function (context) {
        var body = context.document.body;
        context.load(body, 'font/size, font/name, font/color, style');
        return context.sync().then(function () {
            var results = 'Font size: ' + body.font.size +
                '; Font name: ' + body.font.name +
                '; Font color: ' + body.font.color +
                '; Body style: ' + body.style;

            context.document.body.insertParagraph(results, "End");
        });
    }).catch(function (error) {
        console.log('Error: ' + JSON.stringify(error));
        if (error instanceof OfficeExtension.Error) {
            console.log('Debug info: ' + JSON.stringify(error.debugInfo));
            LogMessage("Error occurred in GetFontDetails_Old : " + error.debugInfo, "Error");

        }
    });
}

function GetOOXml_Old() {
    Word.run(function (context) {
        var bodyOOXML = context.document.body.getOoxml();
        return context.sync().then(function () {
            context.document.body.insertParagraph(bodyOOXML.value, "End");
        });
    }).catch(function (error) {
        console.log('Error: ' + JSON.stringify(error));
        if (error instanceof OfficeExtension.Error) {
            console.log('Debug info: ' + JSON.stringify(error.debugInfo));
            LogMessage("Error occurred in GetOOXml_Old : " + error.debugInfo, "Error");
        }
    });
}

function InsertBreak_Old() {
    Word.run(function (context) {
        context.document.body.insertBreak(Word.BreakType.page, Word.InsertLocation.start);
        return context.sync().then(function () {
            context.document.body.insertParagraph("Added a page break at the start of the document body.", "End");
        });
    }).catch(function (error) {
        console.log('Error: ' + JSON.stringify(error));
        if (error instanceof OfficeExtension.Error) {
            console.log('Debug info: ' + JSON.stringify(error.debugInfo));
            LogMessage("Error occurred in InsertBreak_Old : " + error.debugInfo, "Error");
        }
    });
}

function AddContentControl_Old() {
    Word.run(function (context) {
        context.document.body.insertContentControl();
        return context.sync().then(function () {
            context.document.body.insertParagraph("Wrapped the body in a content control.", "End");
        });
    }).catch(function (error) {
        console.log('Error: ' + JSON.stringify(error));
        if (error instanceof OfficeExtension.Error) {
            console.log('Debug info: ' + JSON.stringify(error.debugInfo));
            LogMessage("Error occurred in AddContentControl_Old : " + error.debugInfo, "Error");
        }
    });
}

function InsertFile_Old() {
    Word.run(function (context) {
        context.document.body.insertFileFromBase64(base64File, Word.InsertLocation.start);
        return context.sync().then(function () {
            context.document.body.insertParagraph
                ("Added base64 encoded text to the beginning of the document body.", "End");
        });
    }).catch(function (error) {
        console.log('Error: ' + JSON.stringify(error));
        if (error instanceof OfficeExtension.Error) {
            console.log('Debug info: ' + JSON.stringify(error.debugInfo));
            LogMessage("Error occurred in InsertFile_Old : " + error.debugInfo, "Error");
        }
    });
}

function InsertHtml_Old() {
    Word.run(function (context) {
        context.document.body.insertContentControl();
        return context.sync().then(function () {
            context.document.body.insertParagraph
                ("HTML added to the beginning of the document body.", "End");
        });
    }).catch(function (error) {
        console.log('Error: ' + JSON.stringify(error));
        if (error instanceof OfficeExtension.Error) {
            console.log('Debug info: ' + JSON.stringify(error.debugInfo));
            LogMessage("Error occurred in InsertHtml_Old : " + error.debugInfo, "Error");
        }
    });
}

function InsertOOXML_Old() {
    Word.run(function (context) {
        var bodyOOXML = context.document.body.getOoxml();
        return context.sync().then(function () {
            context.document.body.insertOoxml("this is sample OOxml string", "End");
        });
    }).catch(function (error) {
        console.log('Error: ' + JSON.stringify(error));
        if (error instanceof OfficeExtension.Error) {
            console.log('Debug info: ' + JSON.stringify(error.debugInfo));
            LogMessage("Error occurred in InsertOOXML_Old : " + error.debugInfo, "Error");
        }
    });
}

function InsertParagraph_Old() {
    Word.run(function (context) {
        context.document.body.insertParagraph("Paragraph inserted at the end.", "End");
        return context.sync();
    }).catch(function (error) {
        console.log('Error: ' + JSON.stringify(error));
        if (error instanceof OfficeExtension.Error) {
            console.log('Debug info: ' + JSON.stringify(error.debugInfo));
            LogMessage("Error occurred in InsertParagraph_Old : " + error.debugInfo, "Error");
        }
    });
}

function InsertText_Old() {
    Word.run(function (context) {
        context.document.body.insertText
            ('This is text inserted with body.insertText()',
                Word.InsertLocation.start);
        return context.sync();
    }).catch(function (error) {
        console.log('Error: ' + JSON.stringify(error));
        if (error instanceof OfficeExtension.Error) {
            console.log('Debug info: ' + JSON.stringify(error.debugInfo));
            LogMessage("Error occurred in InsertText_Old : " + error.debugInfo, "Error");
        }
    });
}

function SearchString_Old() {
    Word.run(function (context) {
        let results = context.document.body.search("Office");
        results.load("length");
        return context.sync().then(function () {
            for (let i = 0; i < results.items.length; i++) {
                results.items[i].font.highlightColor = "yellow";
            }
        });
    }).catch(function (error) {
        console.log('Error: ' + JSON.stringify(error));
        if (error instanceof OfficeExtension.Error) {
            console.log('Debug info: ' + JSON.stringify(error.debugInfo));
            LogMessage("Error occurred in SearchString_Old : " + error.debugInfo, "Error");
        }
    });
}

function SelectBodyText_Old() {
    Word.run(function (context) {
        context.document.body.select();
        return context.sync().then(function () {
            context.document.body.insertParagraph("Selected the document body.", "End");
        });
    }).catch(function (error) {
        console.log('Error: ' + JSON.stringify(error));
        if (error instanceof OfficeExtension.Error) {
            console.log('Debug info: ' + JSON.stringify(error.debugInfo));
            LogMessage("Error occurred in SelectBodyText_Old : " + error.debugInfo, "Error");
        }
    });
}

function GetBodyText_Old() {
    Word.run(function (context) {
        var body = context.document.body;
        context.load(body, 'text');
        return context.sync().then(function () {
            context.document.body.insertParagraph("Body contents: " + body.text, "End");
        });
    }).catch(function (error) {
        console.log('Error: ' + JSON.stringify(error));
        if (error instanceof OfficeExtension.Error) {
            console.log('Debug info: ' + JSON.stringify(error.debugInfo));
            LogMessage("Error occurred in GetBodyText_Old : " + error.debugInfo, "Error");
        }
    });
}

// #endregion

// #endregion


// #endregion